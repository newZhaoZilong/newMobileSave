android.content.pm.IPackageDataObserver -> a.a.a.a:
    void onRemoveCompleted(java.lang.String,boolean) -> a
android.content.pm.IPackageDataObserver$Stub -> a.a.a.b:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.content.pm.IPackageStatsObserver -> a.a.a.c:
    void onGetStatsCompleted(android.content.pm.PackageStats,boolean) -> a
android.content.pm.IPackageStatsObserver$Stub -> a.a.a.d:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.android.internal.telephony.ITelephony -> com.a.a.a.a:
    void dial(java.lang.String) -> a
    void call(java.lang.String) -> b
    boolean showCallScreen() -> a
    boolean showCallScreenWithDialpad(boolean) -> a
    boolean endCall() -> b
    void answerRingingCall() -> c
    void silenceRinger() -> d
    boolean isOffhook() -> e
    boolean isRinging() -> f
    boolean isIdle() -> g
    boolean isRadioOn() -> h
    boolean isSimPinEnabled() -> i
    void cancelMissedCallsNotification() -> j
    boolean supplyPin(java.lang.String) -> c
    boolean handlePinMmi(java.lang.String) -> d
    void toggleRadioOnOff() -> k
    boolean setRadio(boolean) -> b
    void updateServiceLocation() -> l
    void enableLocationUpdates() -> m
    void disableLocationUpdates() -> n
    int enableApnType(java.lang.String) -> e
    int disableApnType(java.lang.String) -> f
    boolean enableDataConnectivity() -> o
    boolean disableDataConnectivity() -> p
    boolean isDataConnectivityPossible() -> q
    android.os.Bundle getCellLocation() -> r
    java.util.List getNeighboringCellInfo() -> s
    int getCallState() -> t
    int getDataActivity() -> u
    int getDataState() -> v
    int getActivePhoneType() -> w
    int getCdmaEriIconIndex() -> x
    int getCdmaEriIconMode() -> y
    java.lang.String getCdmaEriText() -> z
    boolean getCdmaNeedsProvisioning() -> A
    int getVoiceMessageCount() -> B
    int getNetworkType() -> C
    boolean hasIccCard() -> D
com.android.internal.telephony.ITelephony$Stub -> com.a.a.a.b:
    com.android.internal.telephony.ITelephony asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.android.internal.telephony.ITelephony$Stub$Proxy -> com.a.a.a.c:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void dial(java.lang.String) -> a
    void call(java.lang.String) -> b
    boolean showCallScreen() -> a
    boolean showCallScreenWithDialpad(boolean) -> a
    boolean endCall() -> b
    void answerRingingCall() -> c
    void silenceRinger() -> d
    boolean isOffhook() -> e
    boolean isRinging() -> f
    boolean isIdle() -> g
    boolean isRadioOn() -> h
    boolean isSimPinEnabled() -> i
    void cancelMissedCallsNotification() -> j
    boolean supplyPin(java.lang.String) -> c
    boolean handlePinMmi(java.lang.String) -> d
    void toggleRadioOnOff() -> k
    boolean setRadio(boolean) -> b
    void updateServiceLocation() -> l
    void enableLocationUpdates() -> m
    void disableLocationUpdates() -> n
    int enableApnType(java.lang.String) -> e
    int disableApnType(java.lang.String) -> f
    boolean enableDataConnectivity() -> o
    boolean disableDataConnectivity() -> p
    boolean isDataConnectivityPossible() -> q
    android.os.Bundle getCellLocation() -> r
    java.util.List getNeighboringCellInfo() -> s
    int getCallState() -> t
    int getDataActivity() -> u
    int getDataState() -> v
    int getActivePhoneType() -> w
    int getCdmaEriIconIndex() -> x
    int getCdmaEriIconMode() -> y
    java.lang.String getCdmaEriText() -> z
    boolean getCdmaNeedsProvisioning() -> A
    int getVoiceMessageCount() -> B
    int getNetworkType() -> C
    boolean hasIccCard() -> D
com.jaredrummler.android.processes.models.AndroidAppProcess -> com.b.a.a.a.a:
    boolean SYS_SUPPORTS_SCHEDGROUPS -> e
    java.util.regex.Pattern PROCESS_NAME_PATTERN -> f
    boolean foreground -> a
    int uid -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getPackageName() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.jaredrummler.android.processes.models.AndroidAppProcess$1 -> com.b.a.a.a.b:
    com.jaredrummler.android.processes.models.AndroidAppProcess createFromParcel(android.os.Parcel) -> a
    com.jaredrummler.android.processes.models.AndroidAppProcess[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.jaredrummler.android.processes.models.AndroidAppProcess$NotAndroidAppProcessException -> com.b.a.a.a.c:
com.jaredrummler.android.processes.models.AndroidProcess -> com.b.a.a.a.d:
    java.lang.String name -> c
    int pid -> d
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getProcessName(int) -> a
    com.jaredrummler.android.processes.models.Cgroup cgroup() -> b
    com.jaredrummler.android.processes.models.Stat stat() -> c
    com.jaredrummler.android.processes.models.Status status() -> d
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.jaredrummler.android.processes.models.AndroidProcess$1 -> com.b.a.a.a.e:
    com.jaredrummler.android.processes.models.AndroidProcess createFromParcel(android.os.Parcel) -> a
    com.jaredrummler.android.processes.models.AndroidProcess[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.jaredrummler.android.processes.models.AndroidProcesses -> com.b.a.a.a.f:
    boolean loggingEnabled -> a
    void log(java.lang.String,java.lang.Object[]) -> a
    void log(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> a
    java.util.List getRunningAppProcesses() -> a
    java.util.List getRunningForegroundApps(android.content.Context) -> a
com.jaredrummler.android.processes.models.Cgroup -> com.b.a.a.a.g:
    java.util.ArrayList groups -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.jaredrummler.android.processes.models.Cgroup get(int) -> a
    com.jaredrummler.android.processes.models.ControlGroup getGroup(java.lang.String) -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.jaredrummler.android.processes.models.Cgroup$1 -> com.b.a.a.a.h:
    com.jaredrummler.android.processes.models.Cgroup createFromParcel(android.os.Parcel) -> a
    com.jaredrummler.android.processes.models.Cgroup[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.jaredrummler.android.processes.models.ControlGroup -> com.b.a.a.a.i:
    int id -> a
    java.lang.String subsystems -> b
    java.lang.String group -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
com.jaredrummler.android.processes.models.ControlGroup$1 -> com.b.a.a.a.j:
    com.jaredrummler.android.processes.models.ControlGroup createFromParcel(android.os.Parcel) -> a
    com.jaredrummler.android.processes.models.ControlGroup[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.jaredrummler.android.processes.models.ProcFile -> com.b.a.a.a.k:
    java.lang.String content -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String readFile(java.lang.String) -> b
    long length() -> length
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.jaredrummler.android.processes.models.ProcFile$1 -> com.b.a.a.a.l:
    com.jaredrummler.android.processes.models.ProcFile createFromParcel(android.os.Parcel) -> a
    com.jaredrummler.android.processes.models.ProcFile[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.jaredrummler.android.processes.models.Stat -> com.b.a.a.a.m:
    java.lang.String[] fields -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.jaredrummler.android.processes.models.Stat get(int) -> a
    java.lang.String getComm() -> a
    int policy() -> b
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.jaredrummler.android.processes.models.Stat$1 -> com.b.a.a.a.n:
    com.jaredrummler.android.processes.models.Stat createFromParcel(android.os.Parcel) -> a
    com.jaredrummler.android.processes.models.Stat[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.jaredrummler.android.processes.models.Status -> com.b.a.a.a.o:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.jaredrummler.android.processes.models.Status get(int) -> a
    java.lang.String getValue(java.lang.String) -> a
    int getUid() -> a
com.jaredrummler.android.processes.models.Status$1 -> com.b.a.a.a.p:
    com.jaredrummler.android.processes.models.Status createFromParcel(android.os.Parcel) -> a
    com.jaredrummler.android.processes.models.Status[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.lidroid.xutils.HttpUtils -> com.c.a.a:
    com.lidroid.xutils.http.HttpCache sHttpCache -> a
    org.apache.http.impl.client.DefaultHttpClient httpClient -> b
    org.apache.http.protocol.HttpContext httpContext -> c
    com.lidroid.xutils.http.callback.HttpRedirectHandler httpRedirectHandler -> d
    java.lang.String responseTextCharset -> e
    long currentRequestExpiry -> f
    com.lidroid.xutils.task.PriorityExecutor EXECUTOR -> g
    com.lidroid.xutils.http.HttpHandler download(java.lang.String,java.lang.String,com.lidroid.xutils.http.callback.RequestCallBack) -> a
    com.lidroid.xutils.http.HttpHandler download(com.lidroid.xutils.http.client.HttpRequest$HttpMethod,java.lang.String,java.lang.String,com.lidroid.xutils.http.RequestParams,boolean,boolean,com.lidroid.xutils.http.callback.RequestCallBack) -> a
com.lidroid.xutils.HttpUtils$1 -> com.c.a.b:
    com.lidroid.xutils.HttpUtils this$0 -> a
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.lidroid.xutils.HttpUtils$2 -> com.c.a.c:
    com.lidroid.xutils.HttpUtils this$0 -> a
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
com.lidroid.xutils.cache.KeyExpiryMap -> com.c.a.a.a:
    java.lang.Long get(java.lang.Object) -> a
    java.lang.Long put(java.lang.Object,java.lang.Long) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Long remove(java.lang.Object) -> b
    void clear() -> clear
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
com.lidroid.xutils.cache.LruMemoryCache -> com.c.a.a.b:
    java.util.LinkedHashMap map -> a
    int size -> b
    int maxSize -> c
    int putCount -> d
    int createCount -> e
    int evictionCount -> f
    int hitCount -> g
    int missCount -> h
    com.lidroid.xutils.cache.KeyExpiryMap keyExpiryMap -> i
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object,long) -> a
    void trimToSize(int) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object create(java.lang.Object) -> c
    int safeSizeOf(java.lang.Object,java.lang.Object) -> b
    int sizeOf(java.lang.Object,java.lang.Object) -> a
    java.lang.String toString() -> toString
com.lidroid.xutils.exception.BaseException -> com.c.a.b.a:
com.lidroid.xutils.exception.HttpException -> com.c.a.b.b:
    int exceptionCode -> a
com.lidroid.xutils.http.HttpCache -> com.c.a.c.a:
    com.lidroid.xutils.cache.LruMemoryCache mMemoryCache -> a
    int cacheSize -> b
    long defaultExpiryTime -> c
    java.util.concurrent.ConcurrentHashMap httpMethod_enabled_map -> d
    long getDefaultExpiryTime() -> a
    void put(java.lang.String,java.lang.String,long) -> a
    java.lang.String get(java.lang.String) -> a
    boolean isEnabled(java.lang.String) -> b
com.lidroid.xutils.http.HttpCache$1 -> com.c.a.c.b:
    com.lidroid.xutils.http.HttpCache this$0 -> a
    int sizeOf(java.lang.String,java.lang.String) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.http.HttpHandler -> com.c.a.c.c:
    org.apache.http.impl.client.AbstractHttpClient client -> b
    org.apache.http.protocol.HttpContext context -> c
    com.lidroid.xutils.http.callback.HttpRedirectHandler httpRedirectHandler -> d
    java.lang.String requestUrl -> e
    java.lang.String requestMethod -> f
    org.apache.http.client.methods.HttpRequestBase request -> g
    boolean isUploading -> h
    com.lidroid.xutils.http.callback.RequestCallBack callback -> i
    int retriedCount -> j
    java.lang.String fileSavePath -> k
    boolean isDownloadingFile -> l
    boolean autoResume -> m
    boolean autoRename -> n
    java.lang.String charset -> o
    com.lidroid.xutils.http.HttpHandler$State state -> p
    long expiry -> q
    long lastUpdateTime -> r
    com.lidroid.xutils.http.HttpHandler$NotUseApacheRedirectHandler notUseApacheRedirectHandler -> s
    void setHttpRedirectHandler(com.lidroid.xutils.http.callback.HttpRedirectHandler) -> a
    void setExpiry(long) -> a
    com.lidroid.xutils.http.ResponseInfo sendRequest(org.apache.http.client.methods.HttpRequestBase) -> a
    java.lang.Void doInBackground(java.lang.Object[]) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    com.lidroid.xutils.http.ResponseInfo handleResponse(org.apache.http.HttpResponse) -> a
    boolean updateProgress(long,long,boolean) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> c
com.lidroid.xutils.http.HttpHandler$NotUseApacheRedirectHandler -> com.c.a.c.d:
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
com.lidroid.xutils.http.HttpHandler$State -> com.c.a.c.e:
    com.lidroid.xutils.http.HttpHandler$State WAITING -> a
    com.lidroid.xutils.http.HttpHandler$State STARTED -> b
    com.lidroid.xutils.http.HttpHandler$State LOADING -> c
    com.lidroid.xutils.http.HttpHandler$State FAILURE -> d
    com.lidroid.xutils.http.HttpHandler$State CANCELLED -> e
    com.lidroid.xutils.http.HttpHandler$State SUCCESS -> f
    int value -> g
    com.lidroid.xutils.http.HttpHandler$State[] ENUM$VALUES -> h
    com.lidroid.xutils.http.HttpHandler$State[] values() -> values
    com.lidroid.xutils.http.HttpHandler$State valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.RequestParams -> com.c.a.c.f:
    java.lang.String charset -> a
    java.util.List headers -> b
    java.util.List queryStringParams -> c
    org.apache.http.HttpEntity bodyEntity -> d
    java.util.List bodyParams -> e
    java.util.HashMap fileParams -> f
    com.lidroid.xutils.task.Priority priority -> g
    com.lidroid.xutils.task.Priority getPriority() -> a
    java.lang.String getCharset() -> b
    org.apache.http.HttpEntity getEntity() -> c
    java.util.List getQueryStringParams() -> d
    java.util.List getHeaders() -> e
com.lidroid.xutils.http.RequestParams$HeaderItem -> com.c.a.c.g:
    boolean overwrite -> a
    org.apache.http.Header header -> b
com.lidroid.xutils.http.ResponseInfo -> com.c.a.c.h:
    org.apache.http.HttpResponse response -> j
    java.lang.Object result -> a
    boolean resultFormCache -> b
    java.util.Locale locale -> c
    int statusCode -> d
    org.apache.http.ProtocolVersion protocolVersion -> e
    java.lang.String reasonPhrase -> f
    long contentLength -> g
    org.apache.http.Header contentType -> h
    org.apache.http.Header contentEncoding -> i
com.lidroid.xutils.http.callback.DefaultHttpRedirectHandler -> com.c.a.c.a.a:
    org.apache.http.client.methods.HttpRequestBase getDirectRequest(org.apache.http.HttpResponse) -> a
com.lidroid.xutils.http.callback.FileDownloadHandler -> com.c.a.c.a.b:
    java.io.File handleEntity(org.apache.http.HttpEntity,com.lidroid.xutils.http.callback.RequestCallBackHandler,java.lang.String,boolean,java.lang.String) -> a
com.lidroid.xutils.http.callback.HttpRedirectHandler -> com.c.a.c.a.c:
    org.apache.http.client.methods.HttpRequestBase getDirectRequest(org.apache.http.HttpResponse) -> a
com.lidroid.xutils.http.callback.RequestCallBack -> com.c.a.c.a.d:
    java.lang.String requestUrl -> a
    int rate -> b
    int getRate() -> a
    void setRequestUrl(java.lang.String) -> a
    void onStart() -> b
    void onLoading(long,long,boolean) -> a
    void onSuccess(com.lidroid.xutils.http.ResponseInfo) -> a
    void onFailure(com.lidroid.xutils.exception.HttpException,java.lang.String) -> a
com.lidroid.xutils.http.callback.RequestCallBackHandler -> com.c.a.c.a.e:
    boolean updateProgress(long,long,boolean) -> a
com.lidroid.xutils.http.callback.StringDownloadHandler -> com.c.a.c.a.f:
    java.lang.String handleEntity(org.apache.http.HttpEntity,com.lidroid.xutils.http.callback.RequestCallBackHandler,java.lang.String) -> a
com.lidroid.xutils.http.client.DefaultSSLSocketFactory -> com.c.a.c.b.a:
    javax.net.ssl.SSLContext sslContext -> a
    java.security.KeyStore trustStore -> b
    com.lidroid.xutils.http.client.DefaultSSLSocketFactory instance -> c
    com.lidroid.xutils.http.client.DefaultSSLSocketFactory getSocketFactory() -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
com.lidroid.xutils.http.client.DefaultSSLSocketFactory$1 -> com.c.a.c.b.b:
    com.lidroid.xutils.http.client.DefaultSSLSocketFactory this$0 -> a
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
com.lidroid.xutils.http.client.HttpRequest -> com.c.a.c.b.c:
    org.apache.http.HttpEntity entity -> a
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod method -> b
    com.lidroid.xutils.http.client.util.URIBuilder uriBuilder -> c
    java.nio.charset.Charset uriCharset -> d
    com.lidroid.xutils.http.client.HttpRequest addQueryStringParams(java.util.List) -> a
    void setRequestParams(com.lidroid.xutils.http.RequestParams,com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> setURI
    void setURI(java.lang.String) -> a
    java.lang.String getMethod() -> getMethod
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    java.lang.Object clone() -> clone
com.lidroid.xutils.http.client.HttpRequest$HttpMethod -> com.c.a.c.b.d:
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod GET -> a
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod POST -> b
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod PUT -> c
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod HEAD -> d
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod MOVE -> e
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod COPY -> f
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod DELETE -> g
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod OPTIONS -> h
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod TRACE -> i
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod CONNECT -> j
    java.lang.String value -> k
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod[] ENUM$VALUES -> l
    java.lang.String toString() -> toString
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod[] values() -> values
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.client.RetryHandler -> com.c.a.c.b.e:
    java.util.HashSet exceptionWhiteList -> a
    java.util.HashSet exceptionBlackList -> b
    int maxRetries -> c
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
com.lidroid.xutils.http.client.entity.BodyParamsEntity -> com.c.a.c.b.a.a:
    byte[] content -> a
    boolean dirty -> b
    java.lang.String charset -> c
    java.util.List params -> d
    void refreshContent() -> a
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
com.lidroid.xutils.http.client.entity.DecompressingEntity -> com.c.a.c.b.a.b:
    java.io.InputStream content -> a
    long uncompressedLength -> b
    long uploadedSize -> c
    com.lidroid.xutils.http.callback.RequestCallBackHandler callBackHandler -> d
    java.io.InputStream decorate(java.io.InputStream) -> a
    java.io.InputStream getDecompressingStream() -> a
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
    void writeTo(java.io.OutputStream) -> writeTo
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
com.lidroid.xutils.http.client.entity.GZipDecompressingEntity -> com.c.a.c.b.a.c:
    java.io.InputStream decorate(java.io.InputStream) -> a
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
    void writeTo(java.io.OutputStream) -> writeTo
com.lidroid.xutils.http.client.entity.UploadEntity -> com.c.a.c.b.a.d:
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
com.lidroid.xutils.http.client.multipart.FormBodyPart -> com.c.a.c.b.b.a:
    java.lang.String name -> a
    com.lidroid.xutils.http.client.multipart.MinimalFieldHeader header -> b
    com.lidroid.xutils.http.client.multipart.content.ContentBody body -> c
    java.lang.String getName() -> a
    com.lidroid.xutils.http.client.multipart.content.ContentBody getBody() -> b
    com.lidroid.xutils.http.client.multipart.MinimalFieldHeader getHeader() -> c
    void addField(java.lang.String,java.lang.String) -> a
    void generateContentDisposition(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> a
    void generateContentType(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> b
    void generateTransferEncoding(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> c
com.lidroid.xutils.http.client.multipart.HttpMultipart -> com.c.a.c.b.b.b:
    org.apache.http.util.ByteArrayBuffer FIELD_SEP -> a
    org.apache.http.util.ByteArrayBuffer CR_LF -> b
    org.apache.http.util.ByteArrayBuffer TWO_DASHES -> c
    java.lang.String subType -> d
    java.nio.charset.Charset charset -> e
    java.lang.String boundary -> f
    java.util.List parts -> g
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode mode -> h
    int[] $SWITCH_TABLE$com$lidroid$xutils$http$client$multipart$HttpMultipartMode -> i
    org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String) -> a
    void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.io.OutputStream) -> a
    void writeField(com.lidroid.xutils.http.client.multipart.MinimalField,java.io.OutputStream) -> a
    void writeField(com.lidroid.xutils.http.client.multipart.MinimalField,java.nio.charset.Charset,java.io.OutputStream) -> a
    java.util.List getBodyParts() -> a
    void addBodyPart(com.lidroid.xutils.http.client.multipart.FormBodyPart) -> a
    java.lang.String getBoundary() -> b
    void doWriteTo(com.lidroid.xutils.http.client.multipart.HttpMultipartMode,java.io.OutputStream,boolean) -> a
    void doWriteTo(com.lidroid.xutils.http.client.multipart.HttpMultipartMode,java.io.OutputStream,com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo,boolean) -> a
    void writeTo(java.io.OutputStream,com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
    long getTotalLength() -> c
    int[] $SWITCH_TABLE$com$lidroid$xutils$http$client$multipart$HttpMultipartMode() -> d
com.lidroid.xutils.http.client.multipart.HttpMultipartMode -> com.c.a.c.b.b.c:
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode STRICT -> a
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode BROWSER_COMPATIBLE -> b
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode[] ENUM$VALUES -> c
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode[] values() -> values
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.client.multipart.MIME -> com.c.a.c.b.b.d:
    java.nio.charset.Charset DEFAULT_CHARSET -> a
com.lidroid.xutils.http.client.multipart.MinimalField -> com.c.a.c.b.b.e:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> a
    java.lang.String getBody() -> b
    java.lang.String toString() -> toString
com.lidroid.xutils.http.client.multipart.MinimalFieldHeader -> com.c.a.c.b.b.f:
    java.util.List fields -> a
    java.util.Map fieldMap -> b
    void addField(com.lidroid.xutils.http.client.multipart.MinimalField) -> a
    com.lidroid.xutils.http.client.multipart.MinimalField getField(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.lidroid.xutils.http.client.multipart.MultipartEntity -> com.c.a.c.b.b.g:
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo callBackInfo -> a
    char[] MULTIPART_CHARS -> b
    com.lidroid.xutils.http.client.multipart.HttpMultipart multipart -> c
    org.apache.http.Header contentType -> d
    long length -> e
    boolean dirty -> f
    java.lang.String boundary -> g
    java.nio.charset.Charset charset -> h
    java.lang.String multipartSubtype -> i
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
    java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String generateBoundary() -> a
    void addPart(com.lidroid.xutils.http.client.multipart.FormBodyPart) -> a
    void addPart(java.lang.String,com.lidroid.xutils.http.client.multipart.content.ContentBody) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo -> com.c.a.c.b.b.h:
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo DEFAULT -> a
    com.lidroid.xutils.http.callback.RequestCallBackHandler callBackHandler -> b
    long totalLength -> c
    long pos -> d
    boolean doCallBack(boolean) -> a
com.lidroid.xutils.http.client.multipart.content.AbstractContentBody -> com.c.a.c.b.b.a.a:
    java.lang.String mimeType -> b
    java.lang.String mediaType -> c
    java.lang.String subType -> d
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo callBackInfo -> a
    java.lang.String getMimeType() -> a
    void setCallBackInfo(com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
com.lidroid.xutils.http.client.multipart.content.ContentBody -> com.c.a.c.b.b.a.b:
    java.lang.String getFilename() -> b
    void writeTo(java.io.OutputStream) -> a
    void setCallBackInfo(com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
com.lidroid.xutils.http.client.multipart.content.ContentDescriptor -> com.c.a.c.b.b.a.c:
    java.lang.String getMimeType() -> a
    java.lang.String getCharset() -> c
    java.lang.String getTransferEncoding() -> d
    long getContentLength() -> e
com.lidroid.xutils.http.client.multipart.content.StringBody -> com.c.a.c.b.b.a.d:
    byte[] content -> b
    java.nio.charset.Charset charset -> c
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
com.lidroid.xutils.http.client.util.URIBuilder -> com.c.a.c.b.c.a:
    java.lang.String scheme -> a
    java.lang.String encodedSchemeSpecificPart -> b
    java.lang.String encodedAuthority -> c
    java.lang.String userInfo -> d
    java.lang.String encodedUserInfo -> e
    java.lang.String host -> f
    int port -> g
    java.lang.String path -> h
    java.lang.String encodedPath -> i
    java.lang.String encodedQuery -> j
    java.util.List queryParams -> k
    java.lang.String fragment -> l
    java.lang.String encodedFragment -> m
    void digestURI(java.net.URI) -> a
    java.util.List parseQuery(java.lang.String) -> a
    java.net.URI build(java.nio.charset.Charset) -> a
    java.lang.String buildString(java.nio.charset.Charset) -> b
    java.lang.String encodeUserInfo(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String encodePath(java.lang.String,java.nio.charset.Charset) -> b
    java.lang.String encodeQuery(java.util.List,java.nio.charset.Charset) -> a
    java.lang.String encodeFragment(java.lang.String,java.nio.charset.Charset) -> c
    com.lidroid.xutils.http.client.util.URIBuilder addParameter(java.lang.String,java.lang.String) -> a
    java.lang.String normalizePath(java.lang.String) -> b
com.lidroid.xutils.http.client.util.URLEncodedUtils -> com.c.a.c.b.c.b:
    char[] DELIM -> a
    java.util.BitSet UNRESERVED -> b
    java.util.BitSet PUNCT -> c
    java.util.BitSet USERINFO -> d
    java.util.BitSet PATHSAFE -> e
    java.util.BitSet FRAGMENT -> f
    java.util.BitSet RESERVED -> g
    java.util.BitSet URLENCODER -> h
    java.util.List parse(java.lang.String) -> a
    java.lang.String format(java.util.List,java.lang.String) -> a
    java.lang.String format(java.lang.Iterable,java.nio.charset.Charset) -> a
    java.lang.String urlencode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean) -> a
    java.lang.String encodeFormFields(java.lang.String,java.lang.String) -> a
    java.lang.String encodeFormFields(java.lang.String,java.nio.charset.Charset) -> d
    java.lang.String encUserInfo(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String encFragment(java.lang.String,java.nio.charset.Charset) -> b
    java.lang.String encPath(java.lang.String,java.nio.charset.Charset) -> c
com.lidroid.xutils.task.Node -> com.c.a.d.a:
    boolean valueAsT -> b
    com.lidroid.xutils.task.PriorityObject value -> c
    com.lidroid.xutils.task.Node next -> a
    com.lidroid.xutils.task.Priority getPriority() -> a
    java.lang.Object getValue() -> b
    void setValue(java.lang.Object) -> a
com.lidroid.xutils.task.Priority -> com.c.a.d.b:
    com.lidroid.xutils.task.Priority UI_TOP -> a
    com.lidroid.xutils.task.Priority UI_NORMAL -> b
    com.lidroid.xutils.task.Priority UI_LOW -> c
    com.lidroid.xutils.task.Priority DEFAULT -> d
    com.lidroid.xutils.task.Priority BG_TOP -> e
    com.lidroid.xutils.task.Priority BG_NORMAL -> f
    com.lidroid.xutils.task.Priority BG_LOW -> g
    com.lidroid.xutils.task.Priority[] ENUM$VALUES -> h
    com.lidroid.xutils.task.Priority[] values() -> values
    com.lidroid.xutils.task.Priority valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.task.PriorityAsyncTask -> com.c.a.d.c:
    com.lidroid.xutils.task.PriorityAsyncTask$InternalHandler sHandler -> b
    java.util.concurrent.Executor sDefaultExecutor -> a
    com.lidroid.xutils.task.PriorityAsyncTask$WorkerRunnable mWorker -> c
    java.util.concurrent.FutureTask mFuture -> d
    boolean mExecuteInvoked -> e
    java.util.concurrent.atomic.AtomicBoolean mCancelled -> f
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> g
    com.lidroid.xutils.task.Priority priority -> h
    void setPriority(com.lidroid.xutils.task.Priority) -> a
    void postResultIfNotInvoked(java.lang.Object) -> c
    java.lang.Object postResult(java.lang.Object) -> d
    java.lang.Object doInBackground(java.lang.Object[]) -> c
    void onPreExecute() -> a
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    void onCancelled(java.lang.Object) -> b
    void onCancelled() -> b
    boolean isCancelled() -> c
    com.lidroid.xutils.task.PriorityAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[]) -> a
    void publishProgress(java.lang.Object[]) -> d
    void finish(java.lang.Object) -> e
    void access$0(com.lidroid.xutils.task.PriorityAsyncTask,java.lang.Object) -> a
    java.util.concurrent.atomic.AtomicBoolean access$1(com.lidroid.xutils.task.PriorityAsyncTask) -> a
    java.lang.Object access$2(com.lidroid.xutils.task.PriorityAsyncTask,java.lang.Object) -> b
    void access$3(com.lidroid.xutils.task.PriorityAsyncTask,java.lang.Object) -> c
com.lidroid.xutils.task.PriorityAsyncTask$1 -> com.c.a.d.d:
    com.lidroid.xutils.task.PriorityAsyncTask this$0 -> a
    java.lang.Object call() -> call
com.lidroid.xutils.task.PriorityAsyncTask$2 -> com.c.a.d.e:
    com.lidroid.xutils.task.PriorityAsyncTask this$0 -> a
    void done() -> done
com.lidroid.xutils.task.PriorityAsyncTask$AsyncTaskResult -> com.c.a.d.f:
    com.lidroid.xutils.task.PriorityAsyncTask mTask -> a
    java.lang.Object[] mData -> b
com.lidroid.xutils.task.PriorityAsyncTask$InternalHandler -> com.c.a.d.g:
    void handleMessage(android.os.Message) -> handleMessage
com.lidroid.xutils.task.PriorityAsyncTask$WorkerRunnable -> com.c.a.d.h:
    java.lang.Object[] mParams -> b
com.lidroid.xutils.task.PriorityExecutor -> com.c.a.d.i:
    java.util.concurrent.ThreadFactory sThreadFactory -> a
    java.util.concurrent.BlockingQueue mPoolWorkQueue -> b
    java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor -> c
    void execute(java.lang.Runnable) -> execute
com.lidroid.xutils.task.PriorityExecutor$1 -> com.c.a.d.j:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.lidroid.xutils.task.PriorityObject -> com.c.a.d.k:
    com.lidroid.xutils.task.Priority priority -> a
    java.lang.Object obj -> b
com.lidroid.xutils.task.PriorityObjectBlockingQueue -> com.c.a.d.l:
    int capacity -> b
    java.util.concurrent.atomic.AtomicInteger count -> c
    com.lidroid.xutils.task.Node head -> a
    com.lidroid.xutils.task.Node last -> d
    java.util.concurrent.locks.ReentrantLock takeLock -> e
    java.util.concurrent.locks.Condition notEmpty -> f
    java.util.concurrent.locks.ReentrantLock putLock -> g
    java.util.concurrent.locks.Condition notFull -> h
    void signalNotEmpty() -> c
    void signalNotFull() -> d
    java.lang.Object opQueue(com.lidroid.xutils.task.Node) -> a
    void _enqueue(com.lidroid.xutils.task.Node) -> b
    java.lang.Object _dequeue() -> e
    void fullyLock() -> a
    void fullyUnlock() -> b
    int size() -> size
    int remainingCapacity() -> remainingCapacity
    void put(java.lang.Object) -> put
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    boolean offer(java.lang.Object) -> offer
    java.lang.Object take() -> take
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    void unlink(com.lidroid.xutils.task.Node,com.lidroid.xutils.task.Node) -> a
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void clear() -> clear
    int drainTo(java.util.Collection) -> drainTo
    int drainTo(java.util.Collection,int) -> drainTo
    java.util.Iterator iterator() -> iterator
com.lidroid.xutils.task.PriorityObjectBlockingQueue$Itr -> com.c.a.d.m:
    com.lidroid.xutils.task.Node current -> b
    com.lidroid.xutils.task.Node lastRet -> c
    java.lang.Object currentElement -> d
    com.lidroid.xutils.task.PriorityObjectBlockingQueue this$0 -> a
    boolean hasNext() -> hasNext
    com.lidroid.xutils.task.Node nextNode(com.lidroid.xutils.task.Node) -> a
    java.lang.Object next() -> next
    void remove() -> remove
com.lidroid.xutils.task.PriorityRunnable -> com.c.a.d.n:
    void run() -> run
com.lidroid.xutils.util.CharsetUtils -> com.c.a.e.a:
    java.util.List SUPPORT_CHARSET -> a
    java.lang.String toCharset(java.lang.String,java.lang.String,int) -> a
    java.lang.String getEncoding(java.lang.String,int) -> a
    boolean isCharset(java.lang.String,java.lang.String,int) -> b
com.lidroid.xutils.util.IOUtils -> com.c.a.e.b:
    void closeQuietly(java.io.Closeable) -> a
com.lidroid.xutils.util.LogUtils -> com.c.a.e.c:
    java.lang.String customTagPrefix -> a
    boolean allowD -> b
    boolean allowE -> c
    boolean allowI -> d
    boolean allowV -> e
    boolean allowW -> f
    boolean allowWtf -> g
    com.lidroid.xutils.util.LogUtils$CustomLogger customLogger -> h
    java.lang.String generateTag(java.lang.StackTraceElement) -> a
    void d(java.lang.String) -> a
    void e(java.lang.String) -> b
    void e(java.lang.String,java.lang.Throwable) -> a
    void w(java.lang.Throwable) -> a
com.lidroid.xutils.util.LogUtils$CustomLogger -> com.c.a.e.d:
    void d(java.lang.String,java.lang.String) -> a
    void e(java.lang.String,java.lang.String) -> b
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void w(java.lang.String,java.lang.Throwable) -> a
com.lidroid.xutils.util.OtherUtils -> com.c.a.e.e:
    java.lang.String getUserAgent(android.content.Context) -> a
    boolean isSupportRange(org.apache.http.HttpResponse) -> a
    java.lang.String getFileNameFromHttpResponse(org.apache.http.HttpResponse) -> b
    java.nio.charset.Charset getCharsetFromHttpRequest(org.apache.http.client.methods.HttpRequestBase) -> a
    long sizeOfString(java.lang.String,java.lang.String) -> a
    java.lang.String getSubString(java.lang.String,int,int) -> a
    java.lang.StackTraceElement getCallerStackTraceElement() -> a
com.shange.mobilesave.activity.AToolActivity -> com.shange.mobilesave.activity.AToolActivity:
    android.widget.TextView tv_sms_backup -> a
    android.widget.ProgressBar pd_bar -> b
    void onCreate(android.os.Bundle) -> onCreate
    void initPhoneAddress() -> b
    void initSmsBackUp() -> c
    void showSmsBackUpDialog() -> a
    void initCommonNumberQuery() -> d
    void initAppLock() -> e
com.shange.mobilesave.activity.AToolActivity$1 -> com.shange.mobilesave.activity.a:
    com.shange.mobilesave.activity.AToolActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.AToolActivity$2 -> com.shange.mobilesave.activity.b:
    com.shange.mobilesave.activity.AToolActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.AToolActivity$3 -> com.shange.mobilesave.activity.c:
    com.shange.mobilesave.activity.AToolActivity this$0 -> a
    android.app.ProgressDialog val$progressDialog -> b
    void run() -> run
com.shange.mobilesave.activity.AToolActivity$3$1 -> com.shange.mobilesave.activity.d:
    com.shange.mobilesave.activity.AToolActivity$3 this$1 -> a
    android.app.ProgressDialog val$progressDialog -> b
    void setProgress(int) -> a
    void setMax(int) -> b
com.shange.mobilesave.activity.AToolActivity$4 -> com.shange.mobilesave.activity.e:
    com.shange.mobilesave.activity.AToolActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.AToolActivity$5 -> com.shange.mobilesave.activity.f:
    com.shange.mobilesave.activity.AToolActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.AntiVirusActivity -> com.shange.mobilesave.activity.AntiVirusActivity:
    android.widget.ImageView iv_scanning -> a
    android.widget.TextView tv_name -> b
    android.widget.ProgressBar pb_bar -> c
    android.widget.LinearLayout ll_add_text -> d
    int index -> e
    java.util.List mVirusScanInfoList -> f
    android.os.Handler mHandler -> g
    void onCreate(android.os.Bundle) -> onCreate
    void unInstallVirus() -> a
    void checkVirus() -> b
    void initAnimation() -> c
    void initUI() -> d
    android.widget.TextView access$0(com.shange.mobilesave.activity.AntiVirusActivity) -> a
    android.widget.LinearLayout access$1(com.shange.mobilesave.activity.AntiVirusActivity) -> b
    android.widget.ImageView access$2(com.shange.mobilesave.activity.AntiVirusActivity) -> c
    void access$3(com.shange.mobilesave.activity.AntiVirusActivity,java.util.List) -> a
    android.widget.ProgressBar access$4(com.shange.mobilesave.activity.AntiVirusActivity) -> d
    java.util.List access$5(com.shange.mobilesave.activity.AntiVirusActivity) -> e
    int access$6(com.shange.mobilesave.activity.AntiVirusActivity) -> f
    void access$7(com.shange.mobilesave.activity.AntiVirusActivity,int) -> a
    android.os.Handler access$8(com.shange.mobilesave.activity.AntiVirusActivity) -> g
com.shange.mobilesave.activity.AntiVirusActivity$1 -> com.shange.mobilesave.activity.g:
    com.shange.mobilesave.activity.AntiVirusActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.shange.mobilesave.activity.AntiVirusActivity$2 -> com.shange.mobilesave.activity.h:
    com.shange.mobilesave.activity.AntiVirusActivity this$0 -> a
    void run() -> run
com.shange.mobilesave.activity.AntiVirusActivity$ScanInfo -> com.shange.mobilesave.activity.i:
    boolean isVirus -> a
    java.lang.String packageName -> b
    java.lang.String name -> c
    com.shange.mobilesave.activity.AntiVirusActivity this$0 -> d
com.shange.mobilesave.activity.AppLockActivity -> com.shange.mobilesave.activity.AppLockActivity:
    android.widget.Button bt_unlock -> a
    android.widget.Button bt_lock -> b
    android.widget.LinearLayout ll_unlock -> c
    android.widget.LinearLayout ll_lock -> d
    android.widget.TextView tv_unlock -> e
    android.widget.TextView tv_lock -> f
    android.widget.ListView lv_unlock -> g
    android.widget.ListView lv_lock -> h
    java.util.List appInfos -> i
    java.util.List mUnLockList -> j
    java.util.List mLockList -> k
    java.util.List lockNameList -> l
    com.shange.mobilesave.activity.AppLockActivity$MyAdapter mLockAdapter -> m
    com.shange.mobilesave.activity.AppLockActivity$MyAdapter mUnLockAdapter -> n
    com.shange.mobilesave.db.dao.AppLockDao mDao -> o
    android.view.animation.TranslateAnimation mTranslateAnimation -> p
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
    void initData() -> b
    void initAnimation() -> c
    android.widget.TextView access$0(com.shange.mobilesave.activity.AppLockActivity) -> a
    java.util.List access$1(com.shange.mobilesave.activity.AppLockActivity) -> b
    android.widget.TextView access$2(com.shange.mobilesave.activity.AppLockActivity) -> c
    java.util.List access$3(com.shange.mobilesave.activity.AppLockActivity) -> d
    android.view.animation.TranslateAnimation access$4(com.shange.mobilesave.activity.AppLockActivity) -> e
    com.shange.mobilesave.db.dao.AppLockDao access$5(com.shange.mobilesave.activity.AppLockActivity) -> f
    com.shange.mobilesave.activity.AppLockActivity$MyAdapter access$6(com.shange.mobilesave.activity.AppLockActivity) -> g
    com.shange.mobilesave.activity.AppLockActivity$MyAdapter access$7(com.shange.mobilesave.activity.AppLockActivity) -> h
    android.widget.LinearLayout access$8(com.shange.mobilesave.activity.AppLockActivity) -> i
    android.widget.LinearLayout access$9(com.shange.mobilesave.activity.AppLockActivity) -> j
    android.widget.Button access$10(com.shange.mobilesave.activity.AppLockActivity) -> k
    android.widget.Button access$11(com.shange.mobilesave.activity.AppLockActivity) -> l
    void access$12(com.shange.mobilesave.activity.AppLockActivity,java.util.List) -> a
    void access$13(com.shange.mobilesave.activity.AppLockActivity,com.shange.mobilesave.db.dao.AppLockDao) -> a
    void access$14(com.shange.mobilesave.activity.AppLockActivity,java.util.List) -> b
    void access$15(com.shange.mobilesave.activity.AppLockActivity,java.util.List) -> c
    void access$16(com.shange.mobilesave.activity.AppLockActivity,java.util.List) -> d
    java.util.List access$17(com.shange.mobilesave.activity.AppLockActivity) -> m
    java.util.List access$18(com.shange.mobilesave.activity.AppLockActivity) -> n
    void access$19(com.shange.mobilesave.activity.AppLockActivity,com.shange.mobilesave.activity.AppLockActivity$MyAdapter) -> a
    android.widget.ListView access$20(com.shange.mobilesave.activity.AppLockActivity) -> o
    void access$21(com.shange.mobilesave.activity.AppLockActivity,com.shange.mobilesave.activity.AppLockActivity$MyAdapter) -> b
    android.widget.ListView access$22(com.shange.mobilesave.activity.AppLockActivity) -> p
com.shange.mobilesave.activity.AppLockActivity$1 -> com.shange.mobilesave.activity.j:
    com.shange.mobilesave.activity.AppLockActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.AppLockActivity$2 -> com.shange.mobilesave.activity.k:
    com.shange.mobilesave.activity.AppLockActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.AppLockActivity$3 -> com.shange.mobilesave.activity.l:
    com.shange.mobilesave.activity.AppLockActivity this$0 -> a
    void preTask() -> a
    void doinBack() -> b
    void postTask() -> c
com.shange.mobilesave.activity.AppLockActivity$MyAdapter -> com.shange.mobilesave.activity.m:
    boolean isLock -> b
    com.shange.mobilesave.activity.AppLockActivity this$0 -> a
    int getCount() -> getCount
    com.shange.mobilesave.db.domain.AppInfo getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    boolean access$1(com.shange.mobilesave.activity.AppLockActivity$MyAdapter) -> a
    com.shange.mobilesave.activity.AppLockActivity access$2(com.shange.mobilesave.activity.AppLockActivity$MyAdapter) -> b
com.shange.mobilesave.activity.AppLockActivity$MyAdapter$1 -> com.shange.mobilesave.activity.n:
    com.shange.mobilesave.activity.AppLockActivity$MyAdapter this$1 -> a
    android.view.View val$animationView -> b
    com.shange.mobilesave.db.domain.AppInfo val$appInfo -> c
    void onClick(android.view.View) -> onClick
    com.shange.mobilesave.activity.AppLockActivity$MyAdapter access$0(com.shange.mobilesave.activity.AppLockActivity$MyAdapter$1) -> a
com.shange.mobilesave.activity.AppLockActivity$MyAdapter$1$1 -> com.shange.mobilesave.activity.o:
    com.shange.mobilesave.activity.AppLockActivity$MyAdapter$1 this$2 -> a
    com.shange.mobilesave.db.domain.AppInfo val$appInfo -> b
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.shange.mobilesave.activity.AppLockActivity$ViewHolder -> com.shange.mobilesave.activity.p:
    android.widget.ImageView iv_icon -> a
    android.widget.TextView tv_name -> b
    android.widget.ImageView iv_lock -> c
com.shange.mobilesave.activity.BaseCacheClearActivity -> com.shange.mobilesave.activity.BaseCacheClearActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.shange.mobilesave.activity.BaseSetupActivity -> com.shange.mobilesave.activity.BaseSetupActivity:
    android.view.GestureDetector gestureDetector -> a
    void onCreate(android.os.Bundle) -> onCreate
    void showPrePage() -> a
    void showNextPage() -> b
    void nextPage(android.view.View) -> nextPage
    void prePage(android.view.View) -> prePage
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.shange.mobilesave.activity.BaseSetupActivity$1 -> com.shange.mobilesave.activity.q:
    com.shange.mobilesave.activity.BaseSetupActivity this$0 -> a
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
com.shange.mobilesave.activity.BlackNumberActivity -> com.shange.mobilesave.activity.BlackNumberActivity:
    android.widget.Button bt_add_black_number -> a
    android.widget.ListView lv_blacknumber -> b
    com.shange.mobilesave.db.dao.BlackNumberDao mBlackNumberDao -> c
    java.util.ArrayList mBlackNumberList -> d
    com.shange.mobilesave.activity.BlackNumberActivity$MyAdapter mAdapter -> e
    int mode -> f
    boolean mIsLoad -> g
    int mCount -> h
    android.os.Handler mHandler -> i
    void onCreate(android.os.Bundle) -> onCreate
    void initData() -> b
    void initUI() -> c
    void showDialog() -> a
    com.shange.mobilesave.activity.BlackNumberActivity$MyAdapter access$0(com.shange.mobilesave.activity.BlackNumberActivity) -> a
    void access$1(com.shange.mobilesave.activity.BlackNumberActivity,com.shange.mobilesave.activity.BlackNumberActivity$MyAdapter) -> a
    android.widget.ListView access$2(com.shange.mobilesave.activity.BlackNumberActivity) -> b
    java.util.ArrayList access$3(com.shange.mobilesave.activity.BlackNumberActivity) -> c
    com.shange.mobilesave.db.dao.BlackNumberDao access$4(com.shange.mobilesave.activity.BlackNumberActivity) -> d
    void access$5(com.shange.mobilesave.activity.BlackNumberActivity,com.shange.mobilesave.db.dao.BlackNumberDao) -> a
    void access$6(com.shange.mobilesave.activity.BlackNumberActivity,java.util.ArrayList) -> a
    void access$7(com.shange.mobilesave.activity.BlackNumberActivity,int) -> a
    android.os.Handler access$8(com.shange.mobilesave.activity.BlackNumberActivity) -> e
    boolean access$9(com.shange.mobilesave.activity.BlackNumberActivity) -> f
    int access$10(com.shange.mobilesave.activity.BlackNumberActivity) -> g
    void access$11(com.shange.mobilesave.activity.BlackNumberActivity,int) -> b
    int access$12(com.shange.mobilesave.activity.BlackNumberActivity) -> h
com.shange.mobilesave.activity.BlackNumberActivity$1 -> com.shange.mobilesave.activity.r:
    com.shange.mobilesave.activity.BlackNumberActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.shange.mobilesave.activity.BlackNumberActivity$2 -> com.shange.mobilesave.activity.s:
    com.shange.mobilesave.activity.BlackNumberActivity this$0 -> a
    void run() -> run
com.shange.mobilesave.activity.BlackNumberActivity$3 -> com.shange.mobilesave.activity.t:
    com.shange.mobilesave.activity.BlackNumberActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.BlackNumberActivity$4 -> com.shange.mobilesave.activity.u:
    com.shange.mobilesave.activity.BlackNumberActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    com.shange.mobilesave.activity.BlackNumberActivity access$0(com.shange.mobilesave.activity.BlackNumberActivity$4) -> a
com.shange.mobilesave.activity.BlackNumberActivity$4$1 -> com.shange.mobilesave.activity.v:
    com.shange.mobilesave.activity.BlackNumberActivity$4 this$1 -> a
    void run() -> run
com.shange.mobilesave.activity.BlackNumberActivity$5 -> com.shange.mobilesave.activity.w:
    com.shange.mobilesave.activity.BlackNumberActivity this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.shange.mobilesave.activity.BlackNumberActivity$6 -> com.shange.mobilesave.activity.x:
    com.shange.mobilesave.activity.BlackNumberActivity this$0 -> a
    android.widget.EditText val$et_phone -> b
    android.app.AlertDialog val$dialog -> c
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.BlackNumberActivity$7 -> com.shange.mobilesave.activity.y:
    com.shange.mobilesave.activity.BlackNumberActivity this$0 -> a
    android.app.AlertDialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.BlackNumberActivity$MyAdapter -> com.shange.mobilesave.activity.z:
    com.shange.mobilesave.activity.BlackNumberActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.shange.mobilesave.activity.BlackNumberActivity access$0(com.shange.mobilesave.activity.BlackNumberActivity$MyAdapter) -> a
com.shange.mobilesave.activity.BlackNumberActivity$MyAdapter$1 -> com.shange.mobilesave.activity.aa:
    com.shange.mobilesave.activity.BlackNumberActivity$MyAdapter this$1 -> a
    int val$position -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.BlackNumberActivity$ViewHolder -> com.shange.mobilesave.activity.ab:
    android.widget.TextView tv_phone -> a
    android.widget.TextView tv_mode -> b
    android.widget.ImageView iv_delete -> c
com.shange.mobilesave.activity.CacheClearActivity -> com.shange.mobilesave.activity.CacheClearActivity:
    android.widget.Button bt_clear -> a
    android.widget.ProgressBar pb_bar -> b
    android.widget.TextView tv_name -> c
    android.widget.LinearLayout ll_add_text -> d
    android.content.pm.PackageManager mPM -> e
    int mIndex -> f
    android.os.Handler mHandler -> g
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
    void initData() -> b
    void getPackageCache(java.lang.String) -> a
    android.widget.LinearLayout access$0(com.shange.mobilesave.activity.CacheClearActivity) -> a
    android.widget.TextView access$1(com.shange.mobilesave.activity.CacheClearActivity) -> b
    android.content.pm.PackageManager access$2(com.shange.mobilesave.activity.CacheClearActivity) -> c
    android.os.Handler access$3(com.shange.mobilesave.activity.CacheClearActivity) -> d
    void access$4(com.shange.mobilesave.activity.CacheClearActivity,android.content.pm.PackageManager) -> a
    android.widget.ProgressBar access$5(com.shange.mobilesave.activity.CacheClearActivity) -> e
    int access$6(com.shange.mobilesave.activity.CacheClearActivity) -> f
    void access$7(com.shange.mobilesave.activity.CacheClearActivity,int) -> a
com.shange.mobilesave.activity.CacheClearActivity$1 -> com.shange.mobilesave.activity.ac:
    com.shange.mobilesave.activity.CacheClearActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    com.shange.mobilesave.activity.CacheClearActivity access$0(com.shange.mobilesave.activity.CacheClearActivity$1) -> a
com.shange.mobilesave.activity.CacheClearActivity$1$1 -> com.shange.mobilesave.activity.ad:
    com.shange.mobilesave.activity.CacheClearActivity$1 this$1 -> a
    com.shange.mobilesave.activity.CacheClearActivity$CacheInfo val$cacheInfo -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.CacheClearActivity$2 -> com.shange.mobilesave.activity.ae:
    com.shange.mobilesave.activity.CacheClearActivity this$0 -> a
    void onClick(android.view.View) -> onClick
    com.shange.mobilesave.activity.CacheClearActivity access$0(com.shange.mobilesave.activity.CacheClearActivity$2) -> a
com.shange.mobilesave.activity.CacheClearActivity$2$1 -> com.shange.mobilesave.activity.af:
    com.shange.mobilesave.activity.CacheClearActivity$2 this$1 -> a
    void onRemoveCompleted(java.lang.String,boolean) -> a
com.shange.mobilesave.activity.CacheClearActivity$3 -> com.shange.mobilesave.activity.ag:
    com.shange.mobilesave.activity.CacheClearActivity this$0 -> a
    void run() -> run
com.shange.mobilesave.activity.CacheClearActivity$4 -> com.shange.mobilesave.activity.ah:
    com.shange.mobilesave.activity.CacheClearActivity this$0 -> a
    void onGetStatsCompleted(android.content.pm.PackageStats,boolean) -> a
com.shange.mobilesave.activity.CacheClearActivity$CacheInfo -> com.shange.mobilesave.activity.ai:
    java.lang.String name -> a
    android.graphics.drawable.Drawable icon -> b
    java.lang.String packagename -> c
    long cacheSize -> d
    com.shange.mobilesave.activity.CacheClearActivity this$0 -> e
com.shange.mobilesave.activity.CommonNumberQueryActivity -> com.shange.mobilesave.activity.CommonNumberQueryActivity:
    android.widget.ExpandableListView el_common_numberlist -> a
    java.util.List mGroup -> b
    com.shange.mobilesave.activity.CommonNumberQueryActivity$MyAdapter myAdapter -> c
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
    void initData() -> b
    void phone(java.lang.String) -> a
    java.util.List access$0(com.shange.mobilesave.activity.CommonNumberQueryActivity) -> a
com.shange.mobilesave.activity.CommonNumberQueryActivity$1 -> com.shange.mobilesave.activity.aj:
    com.shange.mobilesave.activity.CommonNumberQueryActivity this$0 -> a
    boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long) -> onChildClick
com.shange.mobilesave.activity.CommonNumberQueryActivity$MyAdapter -> com.shange.mobilesave.activity.ak:
    com.shange.mobilesave.activity.CommonNumberQueryActivity this$0 -> a
    int getGroupCount() -> getGroupCount
    int getChildrenCount(int) -> getChildrenCount
    com.shange.mobilesave.engine.CommonnumDao$Group getGroup(int) -> a
    com.shange.mobilesave.engine.CommonnumDao$Child getChild(int,int) -> a
    long getGroupId(int) -> getGroupId
    long getChildId(int,int) -> getChildId
    boolean hasStableIds() -> hasStableIds
    android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup) -> getGroupView
    android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup) -> getChildView
    boolean isChildSelectable(int,int) -> isChildSelectable
    java.lang.Object getChild(int,int) -> getChild
    java.lang.Object getGroup(int) -> getGroup
com.shange.mobilesave.activity.ContactListActivity -> com.shange.mobilesave.activity.ContactListActivity:
    android.widget.ListView lv_contact -> a
    java.util.ArrayList arrayList -> b
    android.os.Handler mHandler -> c
    void onCreate(android.os.Bundle) -> onCreate
    void initData() -> a
    void initUI() -> b
    android.widget.ListView access$0(com.shange.mobilesave.activity.ContactListActivity) -> a
    java.util.ArrayList access$1(com.shange.mobilesave.activity.ContactListActivity) -> b
    android.os.Handler access$2(com.shange.mobilesave.activity.ContactListActivity) -> c
com.shange.mobilesave.activity.ContactListActivity$1 -> com.shange.mobilesave.activity.al:
    com.shange.mobilesave.activity.ContactListActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.shange.mobilesave.activity.ContactListActivity$2 -> com.shange.mobilesave.activity.am:
    com.shange.mobilesave.activity.ContactListActivity this$0 -> a
    void run() -> run
com.shange.mobilesave.activity.ContactListActivity$3 -> com.shange.mobilesave.activity.an:
    com.shange.mobilesave.activity.ContactListActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.shange.mobilesave.activity.ContactListActivity$MyAdapter -> com.shange.mobilesave.activity.ao:
    com.shange.mobilesave.activity.ContactListActivity this$0 -> a
    int getCount() -> getCount
    java.util.HashMap getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.shange.mobilesave.activity.EnterPsdActivity -> com.shange.mobilesave.activity.EnterPsdActivity:
    android.widget.TextView tv_app_name -> a
    android.widget.ImageView iv_app_icon -> b
    android.widget.EditText et_psd -> c
    android.widget.Button bt_submit -> d
    java.lang.String packageName -> e
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
    void initData() -> b
    void onBackPressed() -> onBackPressed
    android.widget.EditText access$0(com.shange.mobilesave.activity.EnterPsdActivity) -> a
    java.lang.String access$1(com.shange.mobilesave.activity.EnterPsdActivity) -> b
com.shange.mobilesave.activity.EnterPsdActivity$1 -> com.shange.mobilesave.activity.ap:
    com.shange.mobilesave.activity.EnterPsdActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.HomeActivity -> com.shange.mobilesave.activity.HomeActivity:
    java.lang.String[] mTitleStrs -> a
    int[] mDrawableIds -> b
    android.widget.GridView gv_home -> c
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
    void initData() -> b
    void showDialog() -> c
    void showConfirPsdDialog() -> d
    void showSetPsdDialog() -> e
    java.lang.String[] access$0(com.shange.mobilesave.activity.HomeActivity) -> a
    int[] access$1(com.shange.mobilesave.activity.HomeActivity) -> b
    void access$2(com.shange.mobilesave.activity.HomeActivity) -> c
com.shange.mobilesave.activity.HomeActivity$1 -> com.shange.mobilesave.activity.aq:
    com.shange.mobilesave.activity.HomeActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.shange.mobilesave.activity.HomeActivity$2 -> com.shange.mobilesave.activity.ar:
    com.shange.mobilesave.activity.HomeActivity this$0 -> a
    android.view.View val$view -> b
    android.app.AlertDialog val$dialog -> c
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.HomeActivity$3 -> com.shange.mobilesave.activity.as:
    com.shange.mobilesave.activity.HomeActivity this$0 -> a
    android.app.AlertDialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.HomeActivity$4 -> com.shange.mobilesave.activity.at:
    com.shange.mobilesave.activity.HomeActivity this$0 -> a
    android.view.View val$view -> b
    android.app.AlertDialog val$dialog -> c
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.HomeActivity$5 -> com.shange.mobilesave.activity.au:
    com.shange.mobilesave.activity.HomeActivity this$0 -> a
    android.app.AlertDialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.HomeActivity$MyAdapter -> com.shange.mobilesave.activity.av:
    com.shange.mobilesave.activity.HomeActivity this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.shange.mobilesave.activity.ProcessManagerActivity -> com.shange.mobilesave.activity.ProcessManagerActivity:
    android.content.Context mContext -> a
    android.widget.TextView tv_process_count -> b
    android.widget.TextView tv_memory_info -> c
    android.widget.TextView tv_des -> d
    android.widget.ListView mLv_process_list -> e
    android.widget.Button bt_all -> f
    android.widget.Button bt_reverse -> g
    android.widget.Button bt_clean -> h
    android.widget.Button bt_setting -> i
    android.widget.ProgressBar loading -> j
    java.util.List mProcessInfoList -> k
    java.util.List mSystemList -> l
    java.util.List mCustomerList -> m
    com.shange.mobilesave.activity.ProcessManagerActivity$MyAdapter myAdapter -> n
    com.shange.mobilesave.db.domain.ProcessInfo mProcessInfo -> o
    long mAvailSpace -> p
    java.lang.String mStr_totalSpace -> q
    int mProcessCount -> r
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
    void initTitleData() -> b
    void initListData() -> c
    void onClick(android.view.View) -> onClick
    void selectAll() -> d
    void reverseAll() -> e
    void cleanAll() -> f
    void setting() -> g
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    java.util.List access$0(com.shange.mobilesave.activity.ProcessManagerActivity) -> a
    java.util.List access$1(com.shange.mobilesave.activity.ProcessManagerActivity) -> b
    android.widget.TextView access$2(com.shange.mobilesave.activity.ProcessManagerActivity) -> c
    void access$3(com.shange.mobilesave.activity.ProcessManagerActivity,com.shange.mobilesave.db.domain.ProcessInfo) -> a
    com.shange.mobilesave.db.domain.ProcessInfo access$4(com.shange.mobilesave.activity.ProcessManagerActivity) -> d
    android.widget.ProgressBar access$5(com.shange.mobilesave.activity.ProcessManagerActivity) -> e
    android.content.Context access$6(com.shange.mobilesave.activity.ProcessManagerActivity) -> f
    void access$7(com.shange.mobilesave.activity.ProcessManagerActivity,java.util.List) -> a
    void access$8(com.shange.mobilesave.activity.ProcessManagerActivity,java.util.List) -> b
    void access$9(com.shange.mobilesave.activity.ProcessManagerActivity,java.util.List) -> c
    java.util.List access$10(com.shange.mobilesave.activity.ProcessManagerActivity) -> g
    com.shange.mobilesave.activity.ProcessManagerActivity$MyAdapter access$11(com.shange.mobilesave.activity.ProcessManagerActivity) -> h
    void access$12(com.shange.mobilesave.activity.ProcessManagerActivity,com.shange.mobilesave.activity.ProcessManagerActivity$MyAdapter) -> a
    android.widget.ListView access$13(com.shange.mobilesave.activity.ProcessManagerActivity) -> i
com.shange.mobilesave.activity.ProcessManagerActivity$1 -> com.shange.mobilesave.activity.aw:
    com.shange.mobilesave.activity.ProcessManagerActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.shange.mobilesave.activity.ProcessManagerActivity$2 -> com.shange.mobilesave.activity.ax:
    com.shange.mobilesave.activity.ProcessManagerActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.shange.mobilesave.activity.ProcessManagerActivity$3 -> com.shange.mobilesave.activity.ay:
    com.shange.mobilesave.activity.ProcessManagerActivity this$0 -> a
    void preTask() -> a
    void doinBack() -> b
    void postTask() -> c
com.shange.mobilesave.activity.ProcessManagerActivity$MyAdapter -> com.shange.mobilesave.activity.az:
    com.shange.mobilesave.activity.ProcessManagerActivity this$0 -> a
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    int getCount() -> getCount
    com.shange.mobilesave.db.domain.ProcessInfo getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.shange.mobilesave.activity.ProcessManagerActivity$ViewHolder -> com.shange.mobilesave.activity.ba:
    android.widget.ImageView iv_icon -> a
    android.widget.TextView tv_name -> b
    android.widget.TextView tv_memory_info -> c
    android.widget.CheckBox cb_box -> d
com.shange.mobilesave.activity.ProcessManagerActivity$ViewTitleHolder -> com.shange.mobilesave.activity.bb:
    android.widget.TextView tv_title -> a
com.shange.mobilesave.activity.ProcessSettingActivity -> com.shange.mobilesave.activity.ProcessSettingActivity:
    android.widget.CheckBox cb_show_system -> a
    android.widget.CheckBox cb_lock_clear -> b
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
    void initSystem() -> b
    void initLockClean() -> c
    android.widget.CheckBox access$0(com.shange.mobilesave.activity.ProcessSettingActivity) -> a
    android.widget.CheckBox access$1(com.shange.mobilesave.activity.ProcessSettingActivity) -> b
com.shange.mobilesave.activity.ProcessSettingActivity$1 -> com.shange.mobilesave.activity.bc:
    com.shange.mobilesave.activity.ProcessSettingActivity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.shange.mobilesave.activity.ProcessSettingActivity$2 -> com.shange.mobilesave.activity.bd:
    com.shange.mobilesave.activity.ProcessSettingActivity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.shange.mobilesave.activity.QueryAddressActivity -> com.shange.mobilesave.activity.QueryAddressActivity:
    android.widget.EditText et_input_phone -> a
    android.widget.Button bt_query_phone_address -> b
    android.widget.TextView tv_phone_address -> c
    java.lang.String mAddress -> d
    java.lang.String input_phone -> e
    android.os.Handler mhandler -> f
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
    void query(java.lang.String) -> a
    android.widget.TextView access$0(com.shange.mobilesave.activity.QueryAddressActivity) -> a
    java.lang.String access$1(com.shange.mobilesave.activity.QueryAddressActivity) -> b
    android.widget.EditText access$2(com.shange.mobilesave.activity.QueryAddressActivity) -> c
    void access$3(com.shange.mobilesave.activity.QueryAddressActivity,java.lang.String) -> a
    java.lang.String access$4(com.shange.mobilesave.activity.QueryAddressActivity) -> d
    void access$5(com.shange.mobilesave.activity.QueryAddressActivity,java.lang.String) -> b
    android.os.Handler access$6(com.shange.mobilesave.activity.QueryAddressActivity) -> e
com.shange.mobilesave.activity.QueryAddressActivity$1 -> com.shange.mobilesave.activity.be:
    com.shange.mobilesave.activity.QueryAddressActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.shange.mobilesave.activity.QueryAddressActivity$2 -> com.shange.mobilesave.activity.bf:
    com.shange.mobilesave.activity.QueryAddressActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.shange.mobilesave.activity.QueryAddressActivity$3 -> com.shange.mobilesave.activity.bg:
    com.shange.mobilesave.activity.QueryAddressActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.QueryAddressActivity$3$1 -> com.shange.mobilesave.activity.bh:
    com.shange.mobilesave.activity.QueryAddressActivity$3 this$1 -> a
    float getInterpolation(float) -> getInterpolation
com.shange.mobilesave.activity.QueryAddressActivity$4 -> com.shange.mobilesave.activity.bi:
    com.shange.mobilesave.activity.QueryAddressActivity this$0 -> a
    java.lang.String val$input_phone -> b
    void run() -> run
com.shange.mobilesave.activity.SDCacheClearActivity -> com.shange.mobilesave.activity.SDCacheClearActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.shange.mobilesave.activity.SettingActivity -> com.shange.mobilesave.activity.SettingActivity:
    java.lang.String[] mToastStyles -> a
    int toast_style -> b
    com.shange.mobilesave.view.SettingClickView scv_toast_style -> c
    void onCreate(android.os.Bundle) -> onCreate
    void initBlackNumber() -> b
    void initLocation() -> c
    void initToastStyle() -> d
    void showToastStyleDialog() -> a
    void initAddress() -> e
    void initUpdate() -> f
    void initAppLock() -> g
    com.shange.mobilesave.view.SettingClickView access$0(com.shange.mobilesave.activity.SettingActivity) -> a
    java.lang.String[] access$1(com.shange.mobilesave.activity.SettingActivity) -> b
com.shange.mobilesave.activity.SettingActivity$1 -> com.shange.mobilesave.activity.bj:
    com.shange.mobilesave.activity.SettingActivity this$0 -> a
    com.shange.mobilesave.view.SettingItemView val$siv_blackNumber -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.SettingActivity$2 -> com.shange.mobilesave.activity.bk:
    com.shange.mobilesave.activity.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.SettingActivity$3 -> com.shange.mobilesave.activity.bl:
    com.shange.mobilesave.activity.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.SettingActivity$4 -> com.shange.mobilesave.activity.bm:
    com.shange.mobilesave.activity.SettingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.shange.mobilesave.activity.SettingActivity$5 -> com.shange.mobilesave.activity.bn:
    com.shange.mobilesave.activity.SettingActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.shange.mobilesave.activity.SettingActivity$6 -> com.shange.mobilesave.activity.bo:
    com.shange.mobilesave.activity.SettingActivity this$0 -> a
    com.shange.mobilesave.view.SettingItemView val$siv_address -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.SettingActivity$7 -> com.shange.mobilesave.activity.bp:
    com.shange.mobilesave.activity.SettingActivity this$0 -> a
    com.shange.mobilesave.view.SettingItemView val$siv_update -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.SettingActivity$8 -> com.shange.mobilesave.activity.bq:
    com.shange.mobilesave.activity.SettingActivity this$0 -> a
    com.shange.mobilesave.view.SettingItemView val$siv_app_lock -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.Setup1Activity -> com.shange.mobilesave.activity.Setup1Activity:
    void onCreate(android.os.Bundle) -> onCreate
    void showPrePage() -> a
    void showNextPage() -> b
com.shange.mobilesave.activity.Setup2Activity -> com.shange.mobilesave.activity.Setup2Activity:
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> c
    void showPrePage() -> a
    void showNextPage() -> b
com.shange.mobilesave.activity.Setup2Activity$1 -> com.shange.mobilesave.activity.br:
    com.shange.mobilesave.activity.Setup2Activity this$0 -> a
    com.shange.mobilesave.view.SettingItemView val$siv_sim_bound -> b
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.Setup3Activity -> com.shange.mobilesave.activity.Setup3Activity:
    android.widget.EditText et_phone_number -> a
    android.widget.Button bt_select_number -> b
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> c
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void showPrePage() -> a
    void showNextPage() -> b
com.shange.mobilesave.activity.Setup3Activity$1 -> com.shange.mobilesave.activity.bs:
    com.shange.mobilesave.activity.Setup3Activity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.Setup4Activity -> com.shange.mobilesave.activity.Setup4Activity:
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> c
    void showPrePage() -> a
    void showNextPage() -> b
com.shange.mobilesave.activity.Setup4Activity$1 -> com.shange.mobilesave.activity.bt:
    com.shange.mobilesave.activity.Setup4Activity this$0 -> a
    android.widget.CheckBox val$cb_box -> b
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.shange.mobilesave.activity.SetupOverActivity -> com.shange.mobilesave.activity.SetupOverActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
com.shange.mobilesave.activity.SetupOverActivity$1 -> com.shange.mobilesave.activity.bu:
    com.shange.mobilesave.activity.SetupOverActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.SoftManagerActivity -> com.shange.mobilesave.activity.SoftManagerActivity:
    android.widget.ListView lv_softmanager_application -> a
    android.widget.ProgressBar loading -> b
    com.shange.mobilesave.activity.SoftManagerActivity$MyAdapter myAdapter -> c
    java.util.List appInfos -> d
    java.util.List userappinfo -> e
    java.util.List systemappinfo -> f
    android.widget.TextView tv_softmanager_userorsystem -> g
    android.widget.PopupWindow popupWindow -> h
    com.shange.mobilesave.db.domain.AppInfo appInfo1 -> i
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> b
    void onClick(android.view.View) -> onClick
    void uninstall() -> c
    void start() -> d
    void share() -> e
    void detail() -> f
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void initData() -> g
    void onDestroy() -> onDestroy
    void hidePopupwindow() -> a
    java.util.List access$0(com.shange.mobilesave.activity.SoftManagerActivity) -> a
    java.util.List access$1(com.shange.mobilesave.activity.SoftManagerActivity) -> b
    com.shange.mobilesave.db.domain.AppInfo access$2(com.shange.mobilesave.activity.SoftManagerActivity) -> c
    void access$3(com.shange.mobilesave.activity.SoftManagerActivity,com.shange.mobilesave.db.domain.AppInfo) -> a
    android.widget.TextView access$4(com.shange.mobilesave.activity.SoftManagerActivity) -> d
    void access$5(com.shange.mobilesave.activity.SoftManagerActivity,android.widget.PopupWindow) -> a
    android.widget.PopupWindow access$6(com.shange.mobilesave.activity.SoftManagerActivity) -> e
    android.widget.ProgressBar access$7(com.shange.mobilesave.activity.SoftManagerActivity) -> f
    void access$8(com.shange.mobilesave.activity.SoftManagerActivity,java.util.List) -> a
    void access$9(com.shange.mobilesave.activity.SoftManagerActivity,java.util.List) -> b
    void access$10(com.shange.mobilesave.activity.SoftManagerActivity,java.util.List) -> c
    java.util.List access$11(com.shange.mobilesave.activity.SoftManagerActivity) -> g
    com.shange.mobilesave.activity.SoftManagerActivity$MyAdapter access$12(com.shange.mobilesave.activity.SoftManagerActivity) -> h
    void access$13(com.shange.mobilesave.activity.SoftManagerActivity,com.shange.mobilesave.activity.SoftManagerActivity$MyAdapter) -> a
    android.widget.ListView access$14(com.shange.mobilesave.activity.SoftManagerActivity) -> i
com.shange.mobilesave.activity.SoftManagerActivity$1 -> com.shange.mobilesave.activity.bv:
    com.shange.mobilesave.activity.SoftManagerActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.shange.mobilesave.activity.SoftManagerActivity$2 -> com.shange.mobilesave.activity.bw:
    com.shange.mobilesave.activity.SoftManagerActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.shange.mobilesave.activity.SoftManagerActivity$3 -> com.shange.mobilesave.activity.bx:
    com.shange.mobilesave.activity.SoftManagerActivity this$0 -> a
    void preTask() -> a
    void doinBack() -> b
    void postTask() -> c
com.shange.mobilesave.activity.SoftManagerActivity$MyAdapter -> com.shange.mobilesave.activity.by:
    com.shange.mobilesave.activity.SoftManagerActivity this$0 -> a
    int getCount() -> getCount
    com.shange.mobilesave.db.domain.AppInfo getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.shange.mobilesave.activity.SoftManagerActivity$ViewHolder -> com.shange.mobilesave.activity.bz:
    android.widget.ImageView iv_item_softmanager_icon -> a
    android.widget.TextView tv__item_softmanager_name -> b
    android.widget.TextView tv__item_softmanager_issd -> c
    android.widget.TextView tv__item_softmanager_version -> d
com.shange.mobilesave.activity.SplashActivity -> com.shange.mobilesave.activity.SplashActivity:
    java.lang.String versionDes -> a
    java.lang.String downloadUrl -> b
    int mLocalVersionCode -> c
    android.widget.TextView tv_version_name -> d
    android.os.Handler mHandler -> e
    android.widget.RelativeLayout rl_splash -> f
    void onCreate(android.os.Bundle) -> onCreate
    void initShortCut() -> d
    void initDB() -> e
    void initAddressDB(java.lang.String) -> a
    void initAnimation() -> f
    void showUpdateDialog() -> a
    void downloadApk() -> b
    void installApk(java.io.File) -> a
    void enterHome() -> c
    void initData() -> g
    void checkVersion() -> h
    int getVersionCode() -> i
    java.lang.String getVersionName() -> j
    void initUI() -> k
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.os.Handler access$0(com.shange.mobilesave.activity.SplashActivity) -> a
    void access$1(com.shange.mobilesave.activity.SplashActivity,java.lang.String) -> a
    void access$2(com.shange.mobilesave.activity.SplashActivity,java.lang.String) -> b
    java.lang.String access$3(com.shange.mobilesave.activity.SplashActivity) -> b
    java.lang.String access$4(com.shange.mobilesave.activity.SplashActivity) -> c
    int access$5(com.shange.mobilesave.activity.SplashActivity) -> d
com.shange.mobilesave.activity.SplashActivity$1 -> com.shange.mobilesave.activity.ca:
    com.shange.mobilesave.activity.SplashActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.shange.mobilesave.activity.SplashActivity$2 -> com.shange.mobilesave.activity.cb:
    com.shange.mobilesave.activity.SplashActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.shange.mobilesave.activity.SplashActivity$3 -> com.shange.mobilesave.activity.cc:
    com.shange.mobilesave.activity.SplashActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.shange.mobilesave.activity.SplashActivity$4 -> com.shange.mobilesave.activity.cd:
    com.shange.mobilesave.activity.SplashActivity this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.shange.mobilesave.activity.SplashActivity$5 -> com.shange.mobilesave.activity.ce:
    com.shange.mobilesave.activity.SplashActivity this$0 -> a
    void onSuccess(com.lidroid.xutils.http.ResponseInfo) -> a
    void onFailure(com.lidroid.xutils.exception.HttpException,java.lang.String) -> a
    void onStart() -> b
    void onLoading(long,long,boolean) -> a
com.shange.mobilesave.activity.SplashActivity$6 -> com.shange.mobilesave.activity.cf:
    com.shange.mobilesave.activity.SplashActivity this$0 -> a
    void run() -> run
com.shange.mobilesave.activity.TestActivity -> com.shange.mobilesave.activity.TestActivity:
com.shange.mobilesave.activity.ToastLocationActivity -> com.shange.mobilesave.activity.ToastLocationActivity:
    android.widget.ImageView iv_drag -> a
    android.widget.Button bt_top -> b
    android.widget.Button bt_bottom -> c
    android.view.WindowManager mWM -> d
    int mScreenHeight -> e
    int mScreenWidth -> f
    long startTime -> g
    long[] mHits -> h
    void onCreate(android.os.Bundle) -> onCreate
    void initUI() -> a
    android.widget.ImageView access$0(com.shange.mobilesave.activity.ToastLocationActivity) -> a
    int access$1(com.shange.mobilesave.activity.ToastLocationActivity) -> b
    int access$2(com.shange.mobilesave.activity.ToastLocationActivity) -> c
    android.widget.Button access$3(com.shange.mobilesave.activity.ToastLocationActivity) -> d
    android.widget.Button access$4(com.shange.mobilesave.activity.ToastLocationActivity) -> e
    long[] access$5(com.shange.mobilesave.activity.ToastLocationActivity) -> f
com.shange.mobilesave.activity.ToastLocationActivity$1 -> com.shange.mobilesave.activity.cg:
    int startX -> b
    int startY -> c
    com.shange.mobilesave.activity.ToastLocationActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.shange.mobilesave.activity.ToastLocationActivity$2 -> com.shange.mobilesave.activity.ch:
    com.shange.mobilesave.activity.ToastLocationActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.shange.mobilesave.activity.TrafficActivity -> com.shange.mobilesave.activity.TrafficActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.shange.mobilesave.db.AppLockOpenHelper -> com.shange.mobilesave.a.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.shange.mobilesave.db.BlackNumberOpenHelper -> com.shange.mobilesave.a.b:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.shange.mobilesave.db.dao.AppLockDao -> com.shange.mobilesave.a.a.a:
    com.shange.mobilesave.db.AppLockOpenHelper appLockOpenHelper -> a
    android.content.Context context -> b
    com.shange.mobilesave.db.dao.AppLockDao appLockDao -> c
    com.shange.mobilesave.db.dao.AppLockDao getInstance(android.content.Context) -> a
    void insert(java.lang.String) -> a
    void delete(java.lang.String) -> b
    java.util.List findAll() -> a
com.shange.mobilesave.db.dao.BlackNumberDao -> com.shange.mobilesave.a.a.b:
    com.shange.mobilesave.db.BlackNumberOpenHelper blackNumberOpenHelper -> a
    com.shange.mobilesave.db.dao.BlackNumberDao blackNumberDao -> b
    com.shange.mobilesave.db.dao.BlackNumberDao getInstance(android.content.Context) -> a
    void insert(java.lang.String,java.lang.String) -> a
    void delete(java.lang.String) -> a
    java.util.ArrayList find(int) -> a
    int getCount() -> a
    int getMode(java.lang.String) -> b
com.shange.mobilesave.db.domain.AppInfo -> com.shange.mobilesave.a.b.a:
    java.lang.String name -> a
    android.graphics.drawable.Drawable icon -> b
    java.lang.String packageName -> c
    java.lang.String versionName -> d
    boolean isSD -> e
    boolean isUser -> f
    java.lang.String getName() -> a
    android.graphics.drawable.Drawable getIcon() -> b
    java.lang.String getPackageName() -> c
    java.lang.String getVersionName() -> d
    boolean isSD() -> e
    boolean isUser() -> f
    java.lang.String toString() -> toString
com.shange.mobilesave.db.domain.BlackNumberInfo -> com.shange.mobilesave.a.b.b:
    java.lang.String phone -> a
    java.lang.String mode -> b
    java.lang.String toString() -> toString
com.shange.mobilesave.db.domain.ProcessInfo -> com.shange.mobilesave.a.b.c:
    java.lang.String name -> a
    android.graphics.drawable.Drawable icon -> b
    long memSize -> c
    boolean isCheck -> d
    boolean isSystem -> e
    java.lang.String packageName -> f
    int pid -> g
    java.lang.String getPackageName() -> a
com.shange.mobilesave.engine.AddressDao -> com.shange.mobilesave.b.a:
    java.lang.String path -> a
    java.lang.String mAddress -> b
    java.lang.String getAddress(java.lang.String) -> a
com.shange.mobilesave.engine.AppEngine -> com.shange.mobilesave.b.b:
    java.util.List getAppInfos(android.content.Context) -> a
com.shange.mobilesave.engine.CommonnumDao -> com.shange.mobilesave.b.c:
    java.lang.String path -> a
    java.util.List getGroup() -> a
    java.util.List getChild(android.database.sqlite.SQLiteDatabase,java.lang.String) -> a
com.shange.mobilesave.engine.CommonnumDao$Child -> com.shange.mobilesave.b.d:
    java.lang.String _id -> a
    java.lang.String number -> b
    java.lang.String name -> c
    com.shange.mobilesave.engine.CommonnumDao this$0 -> d
com.shange.mobilesave.engine.CommonnumDao$Group -> com.shange.mobilesave.b.e:
    java.lang.String name -> a
    java.lang.String idx -> b
    java.util.List childList -> c
    com.shange.mobilesave.engine.CommonnumDao this$0 -> d
com.shange.mobilesave.engine.ProcessInfoProvider -> com.shange.mobilesave.b.f:
    int getProcessCount(android.content.Context) -> a
    long getAvailSpace(android.content.Context) -> b
    long getTotalSpace(android.content.Context) -> c
    java.util.List getProcessInfo(android.content.Context) -> d
    void killProcess(android.content.Context,com.shange.mobilesave.db.domain.ProcessInfo) -> a
    void killAll(android.content.Context) -> e
com.shange.mobilesave.engine.SmsBackUp -> com.shange.mobilesave.b.g:
    void backup(android.content.Context,java.lang.String,com.shange.mobilesave.engine.SmsBackUp$CallBack) -> a
com.shange.mobilesave.engine.SmsBackUp$CallBack -> com.shange.mobilesave.b.h:
    void setMax(int) -> b
    void setProgress(int) -> a
com.shange.mobilesave.engine.VirusDao -> com.shange.mobilesave.b.i:
    java.lang.String path -> a
    java.util.List getVirusList() -> a
com.shange.mobilesave.receiver.BootReceiver -> com.shange.mobilesave.receiver.BootReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.shange.mobilesave.receiver.DeviceAdminSampleReceiver -> com.shange.mobilesave.receiver.DeviceAdminSampleReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.shange.mobilesave.receiver.MyAppWidgetProvider -> com.shange.mobilesave.receiver.MyAppWidgetProvider:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void onEnabled(android.content.Context) -> onEnabled
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
    void onAppWidgetOptionsChanged(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle) -> onAppWidgetOptionsChanged
    void onDeleted(android.content.Context,int[]) -> onDeleted
    void onDisabled(android.content.Context) -> onDisabled
com.shange.mobilesave.receiver.SmsReceiver -> com.shange.mobilesave.receiver.SmsReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.shange.mobilesave.service.AddressService -> com.shange.mobilesave.service.AddressService:
    android.telephony.TelephonyManager mTM -> a
    com.shange.mobilesave.service.AddressService$MyPhoneStateListener myPhoneStateListener -> b
    android.view.WindowManager$LayoutParams mParams -> c
    android.view.View mViewToast -> d
    java.lang.String address -> e
    android.view.WindowManager mWM -> f
    int mScreenHeight -> g
    int mScreenWidth -> h
    android.widget.TextView tv_toast -> i
    com.shange.mobilesave.service.AddressService$InnerOutCallReceiver innerOutCallReceiver -> j
    android.os.Handler mhandler -> k
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void showToast(java.lang.String) -> a
    void query(java.lang.String) -> b
    void onDestroy() -> onDestroy
    android.widget.TextView access$0(com.shange.mobilesave.service.AddressService) -> a
    java.lang.String access$1(com.shange.mobilesave.service.AddressService) -> b
    android.view.WindowManager access$2(com.shange.mobilesave.service.AddressService) -> c
    android.view.View access$3(com.shange.mobilesave.service.AddressService) -> d
    int access$4(com.shange.mobilesave.service.AddressService) -> e
    int access$5(com.shange.mobilesave.service.AddressService) -> f
    void access$6(com.shange.mobilesave.service.AddressService,java.lang.String) -> a
    android.os.Handler access$7(com.shange.mobilesave.service.AddressService) -> g
com.shange.mobilesave.service.AddressService$1 -> com.shange.mobilesave.service.a:
    com.shange.mobilesave.service.AddressService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.shange.mobilesave.service.AddressService$2 -> com.shange.mobilesave.service.b:
    int startX -> b
    int startY -> c
    com.shange.mobilesave.service.AddressService this$0 -> a
    android.view.WindowManager$LayoutParams val$params -> d
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.shange.mobilesave.service.AddressService$3 -> com.shange.mobilesave.service.c:
    com.shange.mobilesave.service.AddressService this$0 -> a
    java.lang.String val$incomingNumber -> b
    void run() -> run
com.shange.mobilesave.service.AddressService$InnerOutCallReceiver -> com.shange.mobilesave.service.d:
    com.shange.mobilesave.service.AddressService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.shange.mobilesave.service.AddressService$MyPhoneStateListener -> com.shange.mobilesave.service.e:
    com.shange.mobilesave.service.AddressService this$0 -> a
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
com.shange.mobilesave.service.BlackNumberService -> com.shange.mobilesave.service.BlackNumberService:
    android.telephony.TelephonyManager mTM -> a
    com.shange.mobilesave.service.BlackNumberService$MyPhoneStateListener myPhoneStateListener -> b
    com.shange.mobilesave.service.BlackNumberService$BlackNumberReceiver blackNumberReceiver -> c
    com.shange.mobilesave.db.dao.BlackNumberDao blackNumberDao -> d
    com.shange.mobilesave.service.BlackNumberService$MyContentObserver myContentObserver -> e
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void endCall(java.lang.String) -> a
    void onDestroy() -> onDestroy
    com.shange.mobilesave.db.dao.BlackNumberDao access$0(com.shange.mobilesave.service.BlackNumberService) -> a
com.shange.mobilesave.service.BlackNumberService$BlackNumberReceiver -> com.shange.mobilesave.service.f:
    com.shange.mobilesave.service.BlackNumberService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.shange.mobilesave.service.BlackNumberService$MyContentObserver -> com.shange.mobilesave.service.g:
    java.lang.String phone -> b
    com.shange.mobilesave.service.BlackNumberService this$0 -> a
    void onChange(boolean) -> onChange
com.shange.mobilesave.service.BlackNumberService$MyPhoneStateListener -> com.shange.mobilesave.service.h:
    com.shange.mobilesave.service.BlackNumberService this$0 -> a
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
com.shange.mobilesave.service.LocationService -> com.shange.mobilesave.service.LocationService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
com.shange.mobilesave.service.LocationService$1 -> com.shange.mobilesave.service.i:
    com.shange.mobilesave.service.LocationService this$0 -> a
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onLocationChanged(android.location.Location) -> onLocationChanged
com.shange.mobilesave.service.LockCleanService -> com.shange.mobilesave.service.LockCleanService:
    com.shange.mobilesave.service.LockCleanService$InnerReceiver innerReceiver -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
com.shange.mobilesave.service.LockCleanService$InnerReceiver -> com.shange.mobilesave.service.j:
    com.shange.mobilesave.service.LockCleanService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.shange.mobilesave.service.LockScreenService -> com.shange.mobilesave.service.LockScreenService:
    android.content.ComponentName mDeviceAdminSample -> a
    android.app.admin.DevicePolicyManager mDPM -> b
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
com.shange.mobilesave.service.UpdateWidgetService -> com.shange.mobilesave.service.k:
    java.util.Timer mTimer -> a
    com.shange.mobilesave.service.UpdateWidgetService$InnerReceiver mInnerReceiver -> b
    void onCreate() -> onCreate
    void startTimer() -> c
    void cancelTimerTask() -> a
    void updateAppWidget() -> b
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    void access$0(com.shange.mobilesave.service.UpdateWidgetService) -> a
com.shange.mobilesave.service.UpdateWidgetService$1 -> com.shange.mobilesave.service.l:
    com.shange.mobilesave.service.UpdateWidgetService this$0 -> a
    void run() -> run
com.shange.mobilesave.service.UpdateWidgetService$InnerReceiver -> com.shange.mobilesave.service.m:
    com.shange.mobilesave.service.UpdateWidgetService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.shange.mobilesave.service.WatchDogService -> com.shange.mobilesave.service.WatchDogService:
    java.util.List lockList -> b
    boolean isWatch -> a
    java.lang.String skipPackageName -> c
    com.shange.mobilesave.db.dao.AppLockDao mDao -> d
    com.shange.mobilesave.service.WatchDogService$MyObserver myObserver -> e
    com.shange.mobilesave.service.WatchDogService$InnerReceiver mInnerReceiver -> f
    android.os.IBinder onBind(android.content.Intent) -> onBind
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onCreate() -> onCreate
    void watch() -> a
    void onDestroy() -> onDestroy
    com.shange.mobilesave.db.dao.AppLockDao access$0(com.shange.mobilesave.service.WatchDogService) -> a
    void access$1(com.shange.mobilesave.service.WatchDogService,java.util.List) -> a
    void access$2(com.shange.mobilesave.service.WatchDogService,java.lang.String) -> a
    java.util.List access$3(com.shange.mobilesave.service.WatchDogService) -> b
    java.lang.String access$4(com.shange.mobilesave.service.WatchDogService) -> c
com.shange.mobilesave.service.WatchDogService$1 -> com.shange.mobilesave.service.n:
    com.shange.mobilesave.service.WatchDogService this$0 -> a
    void run() -> run
com.shange.mobilesave.service.WatchDogService$InnerReceiver -> com.shange.mobilesave.service.o:
    com.shange.mobilesave.service.WatchDogService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.shange.mobilesave.service.WatchDogService$MyObserver -> com.shange.mobilesave.service.p:
    com.shange.mobilesave.service.WatchDogService this$0 -> a
    void onChange(boolean) -> onChange
    com.shange.mobilesave.service.WatchDogService access$0(com.shange.mobilesave.service.WatchDogService$MyObserver) -> a
com.shange.mobilesave.service.WatchDogService$MyObserver$1 -> com.shange.mobilesave.service.q:
    com.shange.mobilesave.service.WatchDogService$MyObserver this$1 -> a
    void run() -> run
com.shange.mobilesave.utils.AppUtil -> com.shange.mobilesave.c.a:
    long getAvailableSD() -> a
    long getAvailableROM() -> b
com.shange.mobilesave.utils.Md5Util -> com.shange.mobilesave.c.b:
    java.lang.String encoder(java.lang.String) -> a
com.shange.mobilesave.utils.MyAsyncTask -> com.shange.mobilesave.c.c:
    android.os.Handler handler -> a
    void preTask() -> a
    void doinBack() -> b
    void postTask() -> c
    void execute() -> d
    android.os.Handler access$0(com.shange.mobilesave.utils.MyAsyncTask) -> a
com.shange.mobilesave.utils.MyAsyncTask$1 -> com.shange.mobilesave.c.d:
    com.shange.mobilesave.utils.MyAsyncTask this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.shange.mobilesave.utils.MyAsyncTask$2 -> com.shange.mobilesave.c.e:
    com.shange.mobilesave.utils.MyAsyncTask this$0 -> a
    void run() -> run
com.shange.mobilesave.utils.ServiceUtil -> com.shange.mobilesave.c.f:
    boolean isRunning(android.content.Context,java.lang.String) -> a
com.shange.mobilesave.utils.SpUtil -> com.shange.mobilesave.c.g:
    android.content.SharedPreferences sharedPreferences -> a
    void putBoolean(android.content.Context,java.lang.String,boolean) -> a
    boolean getBoolean(android.content.Context,java.lang.String,boolean) -> b
    void putString(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.String getString(android.content.Context,java.lang.String,java.lang.String) -> b
    void remove(android.content.Context,java.lang.String) -> a
    void createFile(android.content.Context) -> a
    int getInt(android.content.Context,java.lang.String,int) -> a
    void putInt(android.content.Context,java.lang.String,int) -> b
com.shange.mobilesave.utils.StreamUtil -> com.shange.mobilesave.c.h:
    java.lang.String StreamToString(java.io.InputStream) -> a
com.shange.mobilesave.utils.ToastUtil -> com.shange.mobilesave.c.i:
    void show(android.content.Context,java.lang.String) -> a
com.shange.mobilesave.view.FocusTextView -> com.shange.mobilesave.view.FocusTextView:
    boolean isFocused() -> isFocused
com.shange.mobilesave.view.SettingClickView -> com.shange.mobilesave.view.SettingClickView:
    android.widget.CheckBox cb_box -> a
    android.widget.TextView tv_des -> b
    java.lang.String mDesoff -> c
    java.lang.String mDeson -> d
    android.widget.TextView tv_setting_title -> e
    void setTitle(java.lang.String) -> setTitle
    void setDes(java.lang.String) -> setDes
    void setChecked(boolean) -> setChecked
    void setChecked(java.lang.String) -> setChecked
com.shange.mobilesave.view.SettingItemView -> com.shange.mobilesave.view.SettingItemView:
    android.widget.CheckBox cb_box -> a
    android.widget.TextView tv_des -> b
    java.lang.String mDestitle -> c
    java.lang.String mDesoff -> d
    java.lang.String mDeson -> e
    void initAttrs(android.util.AttributeSet) -> a
    boolean isCheck() -> a
    void setChecked(boolean) -> setChecked
    void setChecked(java.lang.String) -> setChecked
